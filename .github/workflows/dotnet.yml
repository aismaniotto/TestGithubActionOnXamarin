name: CI-CD

on:
  create:
    branches: [hotfix/*, release/*]
  pull_request:
    branches: [develop, hotfix/*, release/*]
    types: [opened, reopened, edited, synchronize]
  workflow_dispatch:
    inputs:
      buil_apk:
        description: 'Should build .apk file? YES/NO'
        required: true
        default: 'YES'
      buil_iOS:
        description: 'Should build .ipa file? YES/NO'
        required: true
        default: 'NO'
jobs:
  Test:
    name: Run tests
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Install dependencies
        run: nuget restore
      - name: Build
        run: dotnet build TestGithubActionOnXamarin.UnitTest
      - name: Test
        run: dotnet test TestGithubActionOnXamarin.UnitTest
  BranchInfos:
    name: Output branch name
    runs-on: macos-latest
    needs: Test
    outputs:
      branch_name: ${{ env.BRANCH_NAME }}
      build_apk: ${{ contains(steps.pr-labels.outputs.labels, 'ci-apk') || github.event_name == 'create' }} 
      build_ipa: ${{ contains(steps.pr-labels.outputs.labels, 'ci-ipa') || github.event_name == 'create' }} 
    steps:
      - run: echo github.event_name
      - run: echo ${{ github.event_name }}
      - name: Get branch name (create branch)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
      - name: Get PR labels
        id: pr-labels
        uses: joerick/pr-labels-action@v1.0.6
  Android:
    name: Generate apk in debug profile
    runs-on: macos-latest    
    needs: BranchInfos
    if: ${{ needs.BranchInfos.outputs.build_apk == 'true' }} # output is always string
    steps:
    - uses: actions/checkout@v1      
    - name: Apk
      run: |
        nuget restore
        msbuild TestGithubActionOnXamarin.Android/TestGithubActionOnXamarin.Android.csproj /verbosity:normal /t:Rebuild /t:PackageForAndroid /t:SignAndroidPackage /p:Configuration=Debug 
    - uses: actions/upload-artifact@v2
      with:
        name: Android Apk ${{needs.BranchInfos.outputs.branch_name}} 
        path: TestGithubActionOnXamarin.Android/bin/Debug/br.com.aismaniotto.testgithubactiononxamarin-Signed.apk
  iOS:
    name: Generate ipa in debug profile
    runs-on: macos-latest    
    needs: BranchInfos
    if: ${{ needs.BranchInfos.outputs.build_ipa == 'true' }} # output is always string
    steps:
    - run: echo shouldBeFalse:${{ needs.BranchInfos.outputs.build_ipa }}
    - run: echo shouldBeTrue:${{ needs.BranchInfos.outputs.build_ipa == 'false' }}
    - uses: actions/checkout@v1
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
        # create temporary keychain
        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
        # import certificate to keychain
        security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Ipa
      run: |
        nuget restore
        msbuild TestGithubActionOnXamarin.iOS/TestGithubActionOnXamarin.iOS.csproj /verbosity:normal /t:Rebuild /p:Platform=iPhone /p:Configuration=Debug
    - uses: actions/upload-artifact@v2
      with:
        name: iOS Ipa ${{needs.BranchInfos.outputs.branch_name}} 
        path: TestGithubActionOnXamarin.iOS/bin/iPhone/Debug/TestGithubActionOnXamarin.iOS.ipa
  

